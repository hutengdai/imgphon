"""
03-09-2017 Matthew Faytak
This script gathers acoustic data from audio recorded in tandem with ultrasound.
Intended for use with data structures generated by ultratils and ultracomm libraries, by Ronald Sprouse:
    https://github.com/rsprouse/{ultracomm, ultratils}
Data is taken from seven equally spaced time points in target segments, including the start (index 0), end (7), and midpoint (3).
Returns a .csv file containing acoustic data. Currently only works on one subject at a time.
---
Expected usage: $ python ultra_audio.py directory gender
See arg parser below for details.
---
"""

from __future__ import absolute_import, division, print_function

import os
import re
import argparse
import audiolabel
import subprocess
import numpy as np
from ultratils.exp import Exp
from ultratils.utils import is_white_bpr
from ultratils.utils import is_frozen_bpr

vre = re.compile(
         "^(?P<vowel>AA|AE|AH|AO|EH|ER|EY|IH|IY|OW|UH|UW)(?P<stress>\d)?$"
      )

parser = argparse.ArgumentParser()
parser.add_argument("directory", help="Experiment directory containing the subject")
parser.add_argument("gender", help="Gender of subject for audio analysis.")
args = parser.parse_args()

# checking for appropriate arguments for argparse
try:
    expdir = args.directory
except IndexError:
    print("\tDirectory provided doesn't exist!")
    ArgumentParser.print_usage
    ArgumentParser.print_help
    sys.exit(2)

# gender argument check: ifcformant expects (M, F, child)
try:
    if not (args.gender == 'male' or
            args.gender == 'female' or
            args.gender == 'child'): raise
        
    args.gender != None
except:
    ArgumentParser.print_usage
    ArgumentParser.print_help
    sys.exit(2)

# audio output formatting
# mapping of column headings to column formats
fldmap = (
  "t1", "0.4f",
  "t2", "0.4f",
  "lintime", "0.4f",
  "ifctime", "0.4f",
  "idx", "d",
  "vowel", "s",
  "stress", "s",
  "rms", "s",
  "f1", "s",
  "f2", "s",
  "f3", "s",
  "f4", "s",
  "f0", "s",
  "word", "s",
  "phase", "s",
  "timestamp", "s"
)

# output header line for acoustic data
head = '\t'.join(fldmap[0:len(fldmap):2]) + '\n'

# format string used for output for acoustic data
fmt  = '\t'.join( \
           [ \
               '{' + '{0}:{1}'.format(col,fmt) + '}' \
               for col, fmt in zip( \
                       fldmap[0:len(fldmap):2], \
                       fldmap[1:len(fldmap):2] \
                   ) \
           ] \
       ) + '\n'

# make audio output file and write header to it
audio_out = os.path.join(e.expdir,"audio_out.meas")
with open(audio_out,"w") as out:
    out.write(head)

# assemble experiment object and do setup
e = Exp(expdir=args.directory)
e.gather()

# collect audio information for each acquisition
for idx,a in enumerate(e.acquisitions):

    # set up ifcformant run
    tempifc = 'temp.ifc'
    ifc_args = ['ifcformant',
            str('--speaker=' + args.gender),
            '-e', 'gain -n -3 sinc -t 10 60 contrast',
            '--print-header',
            '--output=' + tempifc]
    
    # run ifcformant and extract meas from desired timepoints
    proc = subprocess.Popen(ifc_args + [wav], stdout=subprocess.PIPE)
    proc.wait()
    if proc.returncode != 0: # throwing exceptions
        for line in proc.stderr:
            sys.stderr.write(line + '\n')
        raise Exception("ifcformant exited with status: {0}".format(proc.returncode))
    ifc = audiolabel.LabelManager(from_file=tempifc, from_type='table', t1_col='sec')
    
    # some more audio metadata
    myphase = a.runvars.phase
    myvowel = m.group('vowel')
    if myword == "HOOF":
        myvowel = "UH"

    # change phone manually to next or previous segment if it's an "R" or an "L".
    # the lack of change in m in v,m above leads to this.
    if v.text == "R":
        myvowel = "R"
    if v.text == "L":
        myvowel = "L"
    
    for iidx, t in enumerate(np.linspace(v.t1, v.t2, num=7)):
        meas = ifc.labels_at(t)
        with open(audio_out, "a") as out:
            out.write(fmt.format(t1=v.t1, t2=v.t2, lintime=t, ifctime=meas.f1.t1,
                idx=iidx, vowel=myvowel, stress=m.group('stress'),
                rms=meas.rms.text, f1=meas.f1.text,
                f2=meas.f2.text, f3=meas.f3.text, f4=meas.f4.text,
                f0=meas.f0.text, word=myword, phase=myphase, timestamp=a.timestamp))

